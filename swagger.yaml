openapi: 3.0.3
info:
  title: Grocery Project
  description: |-
    API documentation for Web Apps Grocery application. This application finds the most cost effective store to go to given a cart of items
  version: 1.0.0
servers:
  - url: http://groceryapp.com
tags:
  - name: stores
    description: Information about stores
  - name: items
    description: available items
  - name: cart
    description: cart calculations
paths:
  /stores/:
    get:
      tags:
        - stores
      summary: Find nearby stores
      description: Find stores in same zip code
      operationId: findStoresByZip
      parameters:
        - name: zipCode
          in: query
          description: stores will be filtered by this.
          required: true
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: Invalid zip code value
          
  /items/:
    get:
      tags:
        - items
      summary: get all items
      description: Returns list of every unique item
      operationId: getItems
      responses:
        '200':
          description: succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  
  /itemSearch/:
    get:
      tags:
        - items
      summary: Search for items
      description: Returns items that contain the search term. If no items exists returns an empty list.
      operationId: itemSearch
      parameters:
        - name: searchTerm
          in: query
          description: Will return items with this in the name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                  
  /calculateCart/:
    post:
      tags:
        - cart
      summary: Calculates the cost of multiple stores with a given cart
      description: Returns the cost of a cart at each given store.
      operationId: calculateCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateCartRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartCost'
        '400':
          description: request contains some 
components:
  schemas:
    Store:
      type: object
      properties:
        id:
          type: integer
          example: 141234
        name:
          type: string
          example: "HEB"
        zipCode:
          type: number
          example: 77095
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 323212
        name:
          type: string
          example: "Banana"
          
    CalculateCartRequest:
      type: object
      properties:
        # storeIds:
        #   type: array
        #   items:
        #     type: integer
        #     example: 141234
        zipCode:
          type: integer
          example: 77095
        itemIds:
          type: array
          items:
            type: integer
            example: 323212
            
    CartCost:
      type: object
      properties:
        storeId:
          type: integer
          example: 141234
        storeName:
          type: string
          example: "HEB"
        totalCost: 
          type: number
          example: 2.50
        cart:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: integer
                example: 323212
              itemName:
                type: string
                example: Banana
              cost:
                type: number
                example: 2.50
        
